}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
#   The genome consists of 1000 markers distributed over 5 chromosome- autosome
#   The population structure of the population is described here:
# ------------------Structure of the simulated population -----------
# Gen.   Progeny        Male%     Male Selected   Female Selected
# 0           15     0.333333        5        0       10        0
# 1           20     0.500000       10        5       10       10
# 2           20     0.500000       10        5       10       10
# 3           20     0.500000       10        5       10       10
# 4           20     0.500000       10        5       10       10
# 5           20     0.500000       10        0       10        0
--------------------------------------------------------------------
# Overall      115 0.478261       55       20       60       40
#
## -------------------------------------------------------------- ##
##        /\  /\                                     /\  /\       ##
##        @ | @                                      @ | @        ##
##         <>       Pedigree based relationship       <>          ##
##                                                                ##
##                                                                ##
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##
## Please FIRST read the theories of genetic relationship matrix (A)
## Given the pedigree (vectors of animal, sire and dam), return additive relationship matrix 'A'.
## Note: Unknown parents should be coded as zero.
## Note: This function works only for pedigrees with numeric IDs
createA <-function(ped){
if (nargs() > 1 ) {
stop("Only the pedigree is required (Animal, Sire, Dam)")
}
# Extract the animals, sire and dam vectors
a<- ped[, 1]
s = ped[, 2]
d = ped[, 3]
# Stop if they are different lengths
if (length(a) != length(d) | length(s) != length(d)){
stop("size of the animal, sire  and dam vectors are different!")
}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
#   The genome consists of 1000 markers distributed over 5 chromosome- autosome
#   The population structure of the population is described here:
# ------------------Structure of the simulated population -----------
# Gen.   Progeny        Male%     Male Selected   Female Selected
# 0           15     0.333333        5        0       10        0
# 1           20     0.500000       10        5       10       10
# 2           20     0.500000       10        5       10       10
# 3           20     0.500000       10        5       10       10
# 4           20     0.500000       10        5       10       10
# 5           20     0.500000       10        0       10        0
--------------------------------------------------------------------
# Overall      115 0.478261       55       20       60       40
#
## -------------------------------------------------------------- ##
##        /\  /\                                     /\  /\       ##
##        @ | @                                      @ | @        ##
##         <>       Pedigree based relationship       <>          ##
##                                                                ##
##                                                                ##
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##
## Please FIRST read the theories of genetic relationship matrix (A)
## Given the pedigree (vectors of animal, sire and dam), return additive relationship matrix 'A'.
## Note: Unknown parents should be coded as zero.
## Note: This function works only for pedigrees with numeric IDs
createA <-function(ped){
if (nargs() > 1 ) {
stop("Only the pedigree is required (Animal, Sire, Dam)")
}
# Extract the animals, sire and dam vectors
a<- ped[, 1]
s = ped[, 2]
d = ped[, 3]
# Stop if they are different lengths
if (length(a) != length(d) | length(s) != length(d)){
stop("size of the animal, sire  and dam vectors are different!")
}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
animal<- c(1,2,3,4, 5, 6, 7, 8)
sire<- c(0,0,0,1, 3, 1, 4, 3)
dam<- c(0,0,0,0,2,	2, 5, 6)
ped<- data.frame(animal=animal,sire=sire, dam=dam)
RelA<- createA(ped)
#   The genome consists of 1000 markers distributed over 5 chromosome- autosome
#   The population structure of the population is described here:
# ------------------Structure of the simulated population -----------
# Gen.   Progeny        Male%     Male Selected   Female Selected
# 0           15     0.333333        5        0       10        0
# 1           20     0.500000       10        5       10       10
# 2           20     0.500000       10        5       10       10
# 3           20     0.500000       10        5       10       10
# 4           20     0.500000       10        5       10       10
# 5           20     0.500000       10        0       10        0
--------------------------------------------------------------------
# Overall      115 0.478261       55       20       60       40
#
## -------------------------------------------------------------- ##
##        /\  /\                                     /\  /\       ##
##        @ | @                                      @ | @        ##
##         <>       Pedigree based relationship       <>          ##
##                                                                ##
##                                                                ##
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##
## Please FIRST read the theories of genetic relationship matrix (A)
## Given the pedigree (vectors of animal, sire and dam), return additive relationship matrix 'A'.
## Note: Unknown parents should be coded as zero.
## Note: This function works only for pedigrees with numeric IDs
createA <- function(ped){
if (nargs() > 1 ) {
stop("Only the pedigree is required (Animal, Sire, Dam)")
}
# Extract the animals, sire and dam vectors
a<- ped[, 1]
s = ped[, 2]
d = ped[, 3]
# Stop if they are different lengths
if (length(a) != length(d) | length(s) != length(d)){
stop("size of the animal, sire  and dam vectors are different!")
}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
#   The genome consists of 1000 markers distributed over 5 chromosome- autosome
#   The population structure of the population is described here:
# ------------------Structure of the simulated population -----------
# Gen.   Progeny        Male%     Male Selected   Female Selected
# 0           15     0.333333        5        0       10        0
# 1           20     0.500000       10        5       10       10
# 2           20     0.500000       10        5       10       10
# 3           20     0.500000       10        5       10       10
# 4           20     0.500000       10        5       10       10
# 5           20     0.500000       10        0       10        0
--------------------------------------------------------------------
# Overall      115 0.478261       55       20       60       40
#
## -------------------------------------------------------------- ##
##        /\  /\                                     /\  /\       ##
##        @ | @                                      @ | @        ##
##         <>       Pedigree based relationship       <>          ##
##                                                                ##
##                                                                ##
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##
## Please FIRST read the theories of genetic relationship matrix (A)
## Given the pedigree (vectors of animal, sire and dam), return additive relationship matrix 'A'.
## Note: Unknown parents should be coded as zero.
## Note: This function works only for pedigrees with numeric IDs
createA <- function(ped){
if (nargs() > 1 ) {
stop("Only the pedigree is required (Animal, Sire, Dam)")
}
# Extract the animals, sire and dam vectors
a<- ped[, 1]
s = ped[, 2]
d = ped[, 3]
# Stop if they are different lengths
if (length(a) != length(d) | length(s) != length(d)){
stop("size of the animal, sire  and dam vectors are different!")
}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
createA <- function(ped){
if (nargs() > 1 ) {
stop("Only the pedigree is required (Animal, Sire, Dam)")
}
# Extract the animals, sire and dam vectors
a<- ped[, 1]
s = ped[, 2]
d = ped[, 3]
# Stop if they are different lengths
if (length(a) != length(d) | length(s) != length(d)){
stop("size of the animal, sire  and dam vectors are different!")
}
# set number of animals and empty vector
n <- length(s)
N <- n + 1
# creat an empty matrix
A <- matrix(0, ncol=N, nrow=N)
# set sires and dams
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
# Begin for loop
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2    # equation for diagonals
for(j in (i+1):n){    # only do half of the matrix (symmetric)
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i, d[j]] ) / 2  # half relationship to parents
A[j,i] <- A[i,j]    # symmetric matrix, so copy to other off-diagonal
}
}
# return the A matrix
A<- A[1:n, 1:n]
#Colnames and rownamesof the matrix
colnames(A)<- rownames(A)<- ped[, 1]
return(A[1:n, 1:n])
}
animal<- c(1,2,3,4, 5, 6, 7, 8)
sire<- c(0,0,0,1, 3, 1, 4, 3)
dam<- c(0,0,0,0,2,	2, 5, 6)
ped<- data.frame(animal=animal,sire=sire, dam=dam)
RelA<- createA(ped)
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce', pvalueCutoff = padj.cutoff, qvalueCutoff = lfc.cutoff)
ekegg$ID
ekegg$ID
# extract the significant ensembl id's
fc <- sig_entrez$log2FoldChange
names(fc) <- sig_entrez$ENTREZID
fc.sorted <- sort(fc, decreasing = TRUE)
dir.create('kegg_pathways', mode = "0777")
setwd('kegg_pathways/')
# prints the pathways as 'sce00010.pathway.png' (and downloads some files from web)
for(pathway in unique(c(ekegg$ID, 'sce00010'))){
pathway = 'sce00010'
pathview(gene.data = fc.sorted, species = "sce",
pathway.id = pathway, high = "green", low = 'red')
}
# prints the pathways as 'sce00010.pathway.png' (and downloads some files from web)
for(pathway in unique(c(ekegg$ID, 'sce00010'))){
pathview(gene.data = fc.sorted, species = "sce",
pathway.id = pathway, high = "green", low = 'red')
}
qvalueCutoff = 0#lfc.cutoff)
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
pvalueCutoff = 1,# padj.cutoff,
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 0 ) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 0) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 1) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 2) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 10) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 20) #lfc.cutoff)
ekegg$ID
ekegg
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 2) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 0.5) #lfc.cutoff)
ekegg$ID
ekegg
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 1) #lfc.cutoff)
ekegg
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 0.1) #lfc.cutoff)
ekegg$ID
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 1000) #lfc.cutoff)
ekegg$ID
# extract the significant ensembl id's
fc <- sig_entrez$log2FoldChange
names(fc) <- sig_entrez$ENTREZID
fc.sorted <- sort(fc, decreasing = TRUE)
dir.create('kegg_pathways', mode = "0777")
setwd('kegg_pathways/')
# prints the pathways as 'sce00010.pathway.png' (and downloads some files from web)
for(pathway in unique(c(ekegg$ID, 'sce00010'))){
pathview(gene.data = fc.sorted, species = "sce",
pathway.id = pathway, high = "green", low = 'red')
}
setwd("D:/BI/Projects/Prj6_Transcriptomics/Transcriptomics_project_BI_2023")
ekegg
ekegg %>%  selet('ID')
ekegg %>%  dplyr::selet('ID')
ekegg %>%  dplyr::select('ID')
ekegg
ekegg$ID
ekegg %>%  select('ID')
ekegg %>%  select(ID)
ekegg['ID']
ekegg[,'ID']
ekegg
ekegg[,c('ID', 'p.adjust', 'qvalue')]
write.table(ekegg[,c('ID', 'p.adjust', 'qvalue')], file =
"KEGG_pathways_pvalues", sep = "\t")
write.table(ekegg[,c('ID', 'p.adjust', 'qvalue')], file =
"KEGG_pathways_pvalues.txt", sep = "\t")
ekegg[,c('ID', 'p.adjust', 'qvalue')]
write.table(ekegg[,c('ID', 'p.adjust', 'qvalue')], file =
"KEGG_pathways_pvalues.txt", sep = "\t", row.names = F)
gc()
library(dplyr)
library(tidyverse)
library(ensembldb)
library(AnnotationHub)
library(EnhancedVolcano)
library(clusterProfiler)
library(org.Sc.sgd.db)
library(pathview)
library(enrichplot)
### # set constants
padj.cutoff <- 0.05
lfc.cutoff <- 0.6
### when running manually in RSturio, upload by name
diffgenes = read.table("result.txt", header=TRUE, dec='.', sep="\t", row.names=1)
### getting Sac Cer genes annotation from web
ah <- AnnotationHub()
yeast_ens <- query(ah, c("Saccharomyces cerevisiae", "EnsDb"))
yeast_ens <- yeast_ens[[tail(yeast_ens$ah_id, 1)]]
### creating a table to compare transcripts codes in data with real genes names
genedb <- genes(yeast_ens, return.type = "data.frame")
genedb <- dplyr::select(genedb, gene_id, symbol)
txdb <- transcripts(yeast_ens, return.type = "data.frame")
txdb <- txdb %>% select(tx_id, gene_id)
tx2gene <- right_join(txdb, genedb, by='gene_id')
### fixing genes names in our data
diffgenes <- diffgenes %>% mutate(gene_id = str_remove(id, 'gene-'))
###  attaching real genes names
diffgenes.an <- left_join(diffgenes, genedb, by='gene_id')
rm(list = c('diffgenes', 'genedb', 'txdb', 'tx2gene'))
gc()
dir.create('plots', mode = "0777")
setwd('plots/')
### build volcano
volcano <-  EnhancedVolcano(diffgenes.an,
lab = diffgenes.an$symbol,
x = 'log2FoldChange', y = 'padj',
title = NULL, subtitle = NULL,
pCutoff = padj.cutoff, FCcutoff = lfc.cutoff)
ggsave('Volcano_plot.png', volcano, height = 7, width = 10)
rm(list = c('volcano'))
### dotplots to find most momular GO terms in significant genes
sig_genes <- diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff)
ego_bp <- enrichGO(gene = sig_genes$gene_id, universe = diffgenes.an$gene_id,
keyType = "ENSEMBL", OrgDb = org.Sc.sgd.db,
pAdjustMethod = "BH", pvalueCutoff = padj.cutoff,
ont = "BP")
ego_mf <- enrichGO(gene = sig_genes$gene_id, universe = diffgenes.an$gene_id,
keyType = "ENSEMBL", OrgDb = org.Sc.sgd.db,
pAdjustMethod = "BH", pvalueCutoff = padj.cutoff,
ont = "MF")
ego_cc <- enrichGO(gene = sig_genes$gene_id, universe = diffgenes.an$gene_id,
keyType = "ENSEMBL", OrgDb = org.Sc.sgd.db,
pAdjustMethod = "BH", pvalueCutoff = padj.cutoff,
ont = "CC")
ridgeplot(ekegg)
dot_bp <- dotplot(ego_bp, showCategory = 10)
dot_mf <- dotplot(ego_mf, showCategory = 10)
dot_cc <- dotplot(ego_cc, showCategory = 10)
ggsave('dotplot_BP.png', dot_bp, height = 9, width = 9)
ggsave('dotplot_MF.png', dot_mf, height = 9, width = 9)
ggsave('dotplot_CC.png', dot_cc, height = 9, width = 9)
rm(list = c('ego_bp','ego_mf', 'ego_cc'))
rm(list = c('dot_bp','dot_mf', 'dot_cc'))
gc()
entrez = bitr(sig_genes$gene_id,
fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Sc.sgd.db")
sig_entrez <- left_join(sig_genes, entrez, by=c('gene_id'='ENSEMBL'))
ekegg <- enrichKEGG(gene = sig_entrez$gene_id, universe=diffgenes.an$gene_id,
organism = 'sce',
pvalueCutoff = 1, # padj.cutoff,
qvalueCutoff = 1000) #lfc.cutoff)
write.table(ekegg[,c('ID', 'p.adjust', 'qvalue')], file =
"KEGG_pathways_pvalues.txt", sep = "\t", row.names = F)
# extract the significant ensembl id's
fc <- sig_entrez$log2FoldChange
names(fc) <- sig_entrez$ENTREZID
fc.sorted <- sort(fc, decreasing = TRUE)
dir.create('kegg_pathways', mode = "0777")
setwd('kegg_pathways/')
# prints the pathways as 'sce00010.pathway.png' (and downloads some files from web)
for(pathway in unique(c(ekegg$ID, 'sce00010'))){
pathview(gene.data = fc.sorted, species = "sce",
pathway.id = pathway, high = "green", low = 'red')
}
### getting Sac Cer genes annotation from web
ah <- AnnotationHub()
diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff)
diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff) %>%  length()
diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff) %>%  nrows()
nrows( diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff) )
length( diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff) )
diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff)
diffgenes.an %>%dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) >= lfc.cutoff) %>%  nrow
diffgenes.an %>%dplyr::filter(abs(log2FoldChange) >= lfc.cutoff) %>%  nrow
